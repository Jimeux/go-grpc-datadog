// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: pb/second/v1/second_service.proto

package second

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SecondServiceClient is the client API for SecondService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SecondServiceClient interface {
	// Create
	//
	// Create a new model.
	Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error)
	// GetByID
	//
	// Fetches a model by ID.
	GetByID(ctx context.Context, in *GetByIDRequest, opts ...grpc.CallOption) (*GetByIDResponse, error)
}

type secondServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSecondServiceClient(cc grpc.ClientConnInterface) SecondServiceClient {
	return &secondServiceClient{cc}
}

func (c *secondServiceClient) Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error) {
	out := new(CreateResponse)
	err := c.cc.Invoke(ctx, "/second.v1.SecondService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *secondServiceClient) GetByID(ctx context.Context, in *GetByIDRequest, opts ...grpc.CallOption) (*GetByIDResponse, error) {
	out := new(GetByIDResponse)
	err := c.cc.Invoke(ctx, "/second.v1.SecondService/GetByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SecondServiceServer is the server API for SecondService service.
// All implementations must embed UnimplementedSecondServiceServer
// for forward compatibility
type SecondServiceServer interface {
	// Create
	//
	// Create a new model.
	Create(context.Context, *CreateRequest) (*CreateResponse, error)
	// GetByID
	//
	// Fetches a model by ID.
	GetByID(context.Context, *GetByIDRequest) (*GetByIDResponse, error)
	mustEmbedUnimplementedSecondServiceServer()
}

// UnimplementedSecondServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSecondServiceServer struct {
}

func (UnimplementedSecondServiceServer) Create(context.Context, *CreateRequest) (*CreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedSecondServiceServer) GetByID(context.Context, *GetByIDRequest) (*GetByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByID not implemented")
}
func (UnimplementedSecondServiceServer) mustEmbedUnimplementedSecondServiceServer() {}

// UnsafeSecondServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SecondServiceServer will
// result in compilation errors.
type UnsafeSecondServiceServer interface {
	mustEmbedUnimplementedSecondServiceServer()
}

func RegisterSecondServiceServer(s grpc.ServiceRegistrar, srv SecondServiceServer) {
	s.RegisterService(&SecondService_ServiceDesc, srv)
}

func _SecondService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecondServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/second.v1.SecondService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecondServiceServer).Create(ctx, req.(*CreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecondService_GetByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecondServiceServer).GetByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/second.v1.SecondService/GetByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecondServiceServer).GetByID(ctx, req.(*GetByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SecondService_ServiceDesc is the grpc.ServiceDesc for SecondService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SecondService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "second.v1.SecondService",
	HandlerType: (*SecondServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _SecondService_Create_Handler,
		},
		{
			MethodName: "GetByID",
			Handler:    _SecondService_GetByID_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb/second/v1/second_service.proto",
}
