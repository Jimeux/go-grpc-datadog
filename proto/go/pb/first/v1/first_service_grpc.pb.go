// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: pb/first/v1/first_service.proto

package first

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FirstServiceClient is the client API for FirstService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FirstServiceClient interface {
	// Create
	//
	// Handles a create request from a user.
	Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error)
	// Fetch
	//
	// Handles a fetch request from a user.
	Fetch(ctx context.Context, in *FetchRequest, opts ...grpc.CallOption) (*FetchResponse, error)
}

type firstServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFirstServiceClient(cc grpc.ClientConnInterface) FirstServiceClient {
	return &firstServiceClient{cc}
}

func (c *firstServiceClient) Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error) {
	out := new(CreateResponse)
	err := c.cc.Invoke(ctx, "/first.v1.FirstService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *firstServiceClient) Fetch(ctx context.Context, in *FetchRequest, opts ...grpc.CallOption) (*FetchResponse, error) {
	out := new(FetchResponse)
	err := c.cc.Invoke(ctx, "/first.v1.FirstService/Fetch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FirstServiceServer is the server API for FirstService service.
// All implementations must embed UnimplementedFirstServiceServer
// for forward compatibility
type FirstServiceServer interface {
	// Create
	//
	// Handles a create request from a user.
	Create(context.Context, *CreateRequest) (*CreateResponse, error)
	// Fetch
	//
	// Handles a fetch request from a user.
	Fetch(context.Context, *FetchRequest) (*FetchResponse, error)
	mustEmbedUnimplementedFirstServiceServer()
}

// UnimplementedFirstServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFirstServiceServer struct {
}

func (UnimplementedFirstServiceServer) Create(context.Context, *CreateRequest) (*CreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedFirstServiceServer) Fetch(context.Context, *FetchRequest) (*FetchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Fetch not implemented")
}
func (UnimplementedFirstServiceServer) mustEmbedUnimplementedFirstServiceServer() {}

// UnsafeFirstServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FirstServiceServer will
// result in compilation errors.
type UnsafeFirstServiceServer interface {
	mustEmbedUnimplementedFirstServiceServer()
}

func RegisterFirstServiceServer(s grpc.ServiceRegistrar, srv FirstServiceServer) {
	s.RegisterService(&FirstService_ServiceDesc, srv)
}

func _FirstService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FirstServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/first.v1.FirstService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FirstServiceServer).Create(ctx, req.(*CreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FirstService_Fetch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FirstServiceServer).Fetch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/first.v1.FirstService/Fetch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FirstServiceServer).Fetch(ctx, req.(*FetchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FirstService_ServiceDesc is the grpc.ServiceDesc for FirstService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FirstService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "first.v1.FirstService",
	HandlerType: (*FirstServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _FirstService_Create_Handler,
		},
		{
			MethodName: "Fetch",
			Handler:    _FirstService_Fetch_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb/first/v1/first_service.proto",
}
